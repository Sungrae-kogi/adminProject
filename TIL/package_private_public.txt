1. package 개념 
package는 class꾸러미란 개념, class와 interface 등을 포함할 수 있다.
서로 관련된 클래스끼리 그룹 단위로 묶음으로 클래스를 효율적으로 관리가 가능
ex)폴더를 만들어서 파일들을 관리하는것과 유사

package명에서 '.' 은 하위 디렉토리를 의미하고 보통 도메인 역순으로 패키지명을 지정한다, 포괄적 이름이 상위 패키지로 가기 위해서인 이유
ex) com.naver.model


중요한 사용 이유가 있으며 class의 고유성 확보기능 package는 자신에게 포함된 class에 고유성을 부여한다.
객체지향 프로그래밍은 여러 class를 조합하여 프로그램을 구성하는데 
이 과정에서 소스 내용은 다르지만 동일한 이름을 가진 class객체가 여러개 존재할 수 있으나 
소속된 package를 기준으로 구분을 함.
*실제로 클래스의 풀네임은 패키지명까지 포함한다.
ex) String class의 실제 이름은 java.lang.String으로 java.lang package에 속한 String class라는 의미.

2. import문
소스코드를 작성할 때 다른 패키지의 클래스를 사용하려면 패키지명이 포함된 클래스 이름을 사용해야 한다.
매번 패키지명을 붙여 작성하려면 불편하기 때문에 클래스의 코드를 작성하기 전에 import문으로 사용하고자 하는 클래스의 패키지를 미리 명시해주면 소스코드에 사용되는 클래스이름에서 패키지명은 생략할 수 있다. 
외부 패키지 클래스를 읽어올 때 사용되며, 이클립스에서의 단축키는 "ctrl+shiff+o"이며, 자동으로 import문을 추가해준다.
자바 기본 패키지 경로는 java.lang이지만 해당 경로는 기본값으로 생략할 수 있다.

ex) java.util.Date import 전>> java.util.Date today = new java.util.Date();

java.util.Date import 후>> Date today = new Date();


3. 접근 제어자 (private, public, default, protected)
멤버 또는 클래스, 메서드, 생성자에 사용되며 해당 멤버 또는 클래스를 외부에서 접근하지 못하도록 제한하는 역할을 한다.
private - 같은 클래스 내에서만 접근이 가능.
default - 같은 패키지 내에서만 접근이 가능.
protected - 같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근이 가능하다.
public - 접근 제한이 없다.

접근 제어자를사용하는 이유는 클래스 내부에 선언된 데이터를 보호하기 위함.
객체지향개념에서 캡슐화