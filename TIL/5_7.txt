1. SQL NVL 함수
데이터 산술, 비교 연산 처리시 NULL 값이 포함되면 연산이 예상대로 동작하지 않는다, 따라서 데이터가 NULL일 경우 값을 임의의 다른 값으로 처리해서 우회하는 방식이 
필요할 때가 있고 이때 NVL 함수를 사용
NVL(data, data가 null일 경우 대체값) 형식
ex) scott계정의 EMP table에서 SAL + COMM 컬럼은 comm이 null인 case부분은 출력이 되지않음 but, NVL(COMM, '0')+SAL 컬럼으로 작성하면 임시로 NULL값을 0으로 하여 사용 가능

2. NVL2 함수
NVL은 null일 경우 대체값을 출력하지만 NVL2는 null이 아닐 경우에도 출력값 대체가 가능

NVL2 ( 대상데이터 , NULL아닐때 데이터 , NULL일때 데이터) 형식
ex) NVL2(COMM, COMM, '0') 으로 


3. table column의 datatype 확인방법
>sqlplus cmd에 desc table명 -> 이름	널?	유형 순으로 출력해줌

4. DECODE함수
DECODE(data, X, A, Y, B) -> data가 X이면 A출력, Y이면 B출력
DECODE(data, X, A, B) 	-> data가 X이면 A출력, X가 아니라면 B출력
DECODE(data, X, A, Y, B, C) -> data가 X이면 A출력, Y이면 B출력, X도 Y도아니라면 C출력


5. CASE문
DECODE와 유사하게 특정 조건에 따라 반환 데이터를 설정할 때 사용, 기준 데이터를 명시하고 그 값에 따라 반환 데이터를 정하는 DECODE와 다르게
CASE문은 각 조건에 사용하는 데이터가 서로 상관없어도 가능.
형식
CASE 검사대상이 될 열 또는 데이터
	WHEN [조건1] THEN [조건1이 true일시 반환값]
	...
	ELSE [위 조건1~n과 일치하는게 없을경우 반환]
END

DECODE와 달리 검사대상이 될 기준 데이터가 존재하지 않더라도 값이 같은 조건 이외의 조건도 사용가능.



추가사항)
sqlplus 에서 '||' 연산자의 역할 
>문자열을 연결할 때 사용한다, 두 개의 문자열을 결합하여 새로운 문자열을 만들 때 
ex)CASE 문에서 WHEN COMM > 0 THEN '수당 : ' || COMM
-> COMM >0인 경우 '수당 : COMM'값이 출력된다.


JSP와 서블릿 공부를 하면서 헷갈렸던 내용이다.

 

request.setCharacterEncoding("UTF-8");
response.setCharacterEncoding("UTF-8");
response.setContentType("text/html;charset=utf-8");
request.setCharacterEncoding("UTF-8"); (post 방식만)
->서블릿에서 post방식으로 정보를 서버에 전달해줄 때

 

.jsp파일 or .html파일에서 폼 태그에 입력한 값을 전송한다고 칩시다.

폼 태그에서 입력한 값을 전송할 때는 GET방식과 POST방식으로 나뉘는데 POST방식으로 보내는 값이 '한글'일 경우 깨지지 않게 전달하기 위해 사용하는 것이 request.setCharacterEncoding("UTF-8"); POST방식으로 보낼때 사용함.

 

GET방식으로 보낸다면?

한글을 GET방식으로 보낼때는 톰캣에 기본적으로 UTF-8문자코드가 적용이 되어있어서 자동으로 한글처리를 해주기때문에 한글이 깨지지 않습니다.

 

response.setCharacterEncoding("UTF-8"); (get, post 방식 둘다)
->서블릿에서 직접 브라우저에 출력해줄 경우 쓴다

 

서블릿에서 화면에 데이터를 출력하기 위해서는 out.print를 사용하는데 response.setCharacterEncoding("UTF-8"); 없이 out.print("하이");를 한다면 '하이'가 출력되는 것이 아니라  ???? 과 같은 물음표가 출력됩니다.

이러한 문제점을 해결하기 위한 방법으로 response.setCharacterEncoding("UTF-8"); 를 추가 합니다.

이는 post방식, get방식 모두 동일하게 사용됩니다.

 

response.setContentType("text/html;charset=utf-8"); (get, post 방식 둘다)
->서블릿에서 직접 브라우저에 출력해줄 경우 쓴다


JSP Servlet에서 궁금했던 내용 
request.setCharacterEncoding("UTF-8");
response.setCharacterEncoding("UTF-8");
response.setContentType("text/html;charset=utf-8");


request.setCharacterEncoding("UTF-8");
>Servlet에서 post방식으로 정보를 서버에 전달할때 message-body에 한글이 들어갈 경우 글자가 깨지기때문에 인코딩형식을 지정해주는것이다,
 하지만 get요청에서는 url query에 담기게되는데 tomcat이 자동으로 한글처리를 해주기때문에 get에서는 문제가없다.
 
response.setContentType("text/html;charset=UTF-8");
>Servlet에서 직접 브라우저에 출력해줄 경우 사용한다.



6. VO(Value Object) class 
3가지 특징을 갖는다.
1. 불변성				- 수정자(setter)가 없다
2. 값 동등성			- 두 VO가 동일한 값을 가진다면 둘은 동등하다, 이를 위해 equals와 hashcode메소드를 재정의
3. 자가 유효성 검증		- VO는 유효한 값으로만 생성한다, 
ex)
public class Age {
    private int value;
    
    protected Age() {}

    public Age(int value) {
        validate(value);
        this.value = value;
    }
    
    public void validate(int value) {
        if (value < 0) {
            // 예외 발생
        }
    }
}
이렇게 있을때 Age 객체는 0 이상을 보장한다는것이다.